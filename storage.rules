rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Allow authenticated users to upload verification documents (images and videos)
    match /verification_documents/{fileName} {
      allow read, write: if request.auth != null 
                    && request.resource.size < 25 * 1024 * 1024 // 25MB
                    && (request.resource.contentType.matches('image/.*') || 
                        request.resource.contentType.matches('video/.*'));
      // Allow write during provider registration verification
      allow write: if request.auth != null && request.resource.size < 25 * 1024 * 1024;
    }
    
    // Profile pictures
    match /profile_pictures/{allPaths=**} {
      allow read, write: if request.auth != null;
    }
    
    // Provider profile photos
    match /provider_profile_photos/{userId}/{fileName} {
      allow read, write: if request.auth != null && request.auth.uid == userId
                        && request.resource.size < 10 * 1024 * 1024 // 10MB
                        && request.resource.contentType.matches('image/.*');
    }
    
    // Provider verification documents (specific rule)
    match /providers/{userId}/verification_documents/{fileName} {
      allow read, write: if request.auth != null && request.auth.uid == userId
                        && request.resource.size < 25 * 1024 * 1024; // 25MB - removed content type restriction for testing
    }
    
    // Provider documents and storefront content (permissive rule for debugging)
    match /providers/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow service request attachments (images, videos, and PDFs)
    match /service_attachments/{userId}/{fileName} {
      allow write: if request.auth != null && request.auth.uid == userId
                    && request.resource.size < 50 * 1024 * 1024 // 50MB
                    && (request.resource.contentType.matches('image/.*') || 
                        request.resource.contentType.matches('video/.*') ||
                        request.resource.contentType.matches('application/pdf'));
      allow read: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow review photos (temporary permissive rule for debugging)
    match /review_photos/{fileName} {
      allow read, write: if request.auth != null;
    }
    
    // Default deny
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
} 