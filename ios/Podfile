# Recommended Podfile configuration for Firebase + Flutter on iOS
platform :ios, '15.0'

ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!
  
  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
  
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    
    target.build_configurations.each do |config|
      # Set minimum deployment target
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '15.0'
      
      # Fix simulator architecture issues
      config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
      
      # Disable bitcode (required for Firebase)
      config.build_settings['ENABLE_BITCODE'] = 'NO'
      
      # Firebase gRPC conflict resolution
      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= [
        '$(inherited)',
        'PERMISSION_EVENTS=1',
        'PERMISSION_REMINDERS=1',
        'PERMISSION_CONTACTS=1',
        'PERMISSION_CAMERA=1',
        'PERMISSION_MICROPHONE=1',
        'PERMISSION_SPEECH_RECOGNIZER=1',
        'PERMISSION_PHOTOS=1',
      ]
      
      # Fix duplicate framework issues specifically for gRPC
      if target.name == 'gRPC-C++' || target.name == 'gRPC-Core'
        config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        config.build_settings['OTHER_CFLAGS'] = '$(inherited) -DGRPC_ARES=0'
      end
      
      # Firestore specific fixes
      if target.name.include?('FirebaseFirestore')
        config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
        config.build_settings['DEFINES_MODULE'] = 'YES'
      end
    end
  end
  
  # Remove duplicate framework references (critical fix)
  installer.pods_project.targets.each do |target|
    if target.name == 'Runner'
      puts "Cleaning up Runner target build phases..."
      
      # Find and fix copy frameworks build phase
      target.build_phases.each do |build_phase|
        if build_phase.class == Xcodeproj::Project::Object::PBXCopyFilesBuildPhase
          if build_phase.name == '[CP] Embed Pods Frameworks'
            puts "Found embedded frameworks phase, checking for duplicates..."
            
            # Track frameworks to avoid duplicates
            framework_paths = []
            files_to_remove = []
            
            build_phase.files.each do |build_file|
              if build_file.file_ref
                framework_path = build_file.file_ref.path
                if framework_paths.include?(framework_path)
                  puts "Removing duplicate framework: #{framework_path}"
                  files_to_remove << build_file
                else
                  framework_paths << framework_path
                end
              end
            end
            
            files_to_remove.each { |file| build_phase.remove_file_reference(file) }
          end
        end
      end
    end
  end
end
