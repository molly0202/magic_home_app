rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - users can read/write their own document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow reading referral code for referral validation
      allow read: if request.auth != null && resource.data.referralCode != null;
    }
    
    // Providers collection - providers can read/write their own document
    match /providers/{providerId} {
      allow read, write: if request.auth != null && request.auth.uid == providerId;
      // Allow all authenticated users to read provider documents for browsing
      allow read: if request.auth != null;
      // Allow users to update referred_by_user_ids when processing referral codes
      allow update: if request.auth != null && 
                   request.writeFields.hasOnly(['referred_by_user_ids']) &&
                   request.auth.uid in request.resource.data.referred_by_user_ids;
    }
    
    // Service requests - authenticated users can create, providers can see pending requests
    match /service_requests/{requestId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.user_id || 
         resource.data.status == 'pending'); 
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.user_id || 
         resource.data.status == 'pending');
      allow write: if request.auth != null && request.auth.uid == resource.data.user_id;
    }
    
    // User requests - new unified collection
    match /user_requests/{requestId} {
      allow create: if request.auth != null;
      // Users can read their own requests, providers can read requests in certain statuses
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         resource.data.status in ['pending', 'matched', 'bidding', 'assigned']); 
      // Users can update their own requests, system can update for matching/bidding
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         resource.data.status in ['pending', 'matched', 'bidding', 'assigned']);
      allow write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Service bids - providers can create bids, users can read bids for their requests
    match /service_bids/{bidId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.providerId || 
         request.auth.uid == resource.data.userId);
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.providerId || 
         request.auth.uid == resource.data.userId);
    }
    
    // Bidding sessions - users and providers can read sessions for their requests
    match /bidding_sessions/{sessionId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid in resource.data.notifiedProviders);
      allow update: if request.auth != null;
    }
    
    // Service orders - both customer and provider can access
    match /service_orders/{orderId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.user_id || 
         request.auth.uid == resource.data.provider_id);
      allow create: if request.auth != null;
    }
    
    // Provider notifications - providers can read their own notifications
    match /provider_notifications/{notificationId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.providerId;
      allow create: if request.auth != null; // System can create notifications
    }
    
    // Admin emails - system generated
    match /admin_emails/{emailId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null;
    }
    
    // Referral errors collection for debugging (write-only for users, read for admin)
    match /referral_errors/{errorId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null; // Can be restricted to admin emails in production
    }
    
    // Upload errors collection for debugging (write-only for users, read for admin)
    match /upload_errors/{errorId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null; // Can be restricted to admin emails in production
    }
    
    // Development mode - allow all authenticated users to read/write
    // TODO: Remove this in production and use specific rules above
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}